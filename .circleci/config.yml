version: 2.1

parameters:
  cache-generation:
    type: integer
    default: 1

orbs:
  win: circleci/windows@2.2

environment:
  PIP_PROGRESS_BAR: 'off'

jobs:
  test-linux:
    parameters:
      python-version:
        type: string
      pip-constraints:
        type: string

    docker:
      - image: cimg/python:<< parameters.python-version >>

    steps:
      - checkout

      - restore_cache: &restore-cache-env
          key: v<< pipeline.parameters.cache-generation >>-pip-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &create-virtualenv
          name: Create virtual environment
          command: |
            python -m venv env

      - run: &install-requirements
          name: Install requirements
          command: |
            . env/bin/activate
            pip install -U pip
            pip install -r requirements.txt
            pip install -r tests/requirements.txt
            pip install wheel twine

      - save_cache: &save-cache-env
          key: v<< pipeline.parameters.cache-generation >>-pip-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - env

      - run: &build-package
          name: Build package
          command: env/bin/python setup.py sdist bdist_wheel

      - run: &install-package-with-constraints
          name: Install package (with constraints)
          command: |
            . env/bin/activate
            pip install . -c <(printf '%s\n' << parameters.pip-constraints >>)

      - run: &run-python-tests
          name: Run Python tests
          command: |
            . env/bin/activate
            python -m unittest

  test-macos:
    parameters:
      python-version:
        type: string
      xcode:
        type: string
        default: "13.2.0"

    macos:
      xcode: << parameters.xcode >>

    steps:
      - checkout

      # install `python-version` and cache it
      - when:
          condition:
            matches:
              pattern: "^3\\.[123][123456789].*$"
              value: << parameters.python-version >>
          steps:
            - run:
                name: Update brew to get latest pyenv
                command: brew update

      - run: &brew-install-pyenv
          name: Install pyenv
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install pyenv

      - restore_cache: &restore-cache-pyenv
          keys:
            - v<< pipeline.parameters.cache-generation >>-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-<< parameters.xcode >>

      - run: &pyenv-install-python
          name: Install python
          command: pyenv install << parameters.python-version >> -s

      - run: &pyenv-set-system-python
          name: Set system python
          command: |
            echo -e '\n\n# Initialize pyenv' >> ~/.bash_profile
            echo 'eval "$(pyenv init --path 2>/dev/null || true)"' >> ~/.bash_profile
            echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
            pyenv global << parameters.python-version >>

      - save_cache: &save-cache-pyenv
          key: v<< pipeline.parameters.cache-generation >>-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-<< parameters.xcode >>
          paths:
            - ~/.pyenv

      # install dependencies and cache them
      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run: *install-requirements

      - save_cache: *save-cache-env

      - run: &install-package
          name: Install package
          command: env/bin/pip install .

      - run: *run-python-tests

  test-windows:
    parameters:
      python-version:
        type: string

    executor:
      name: win/default

    steps:
      - checkout

      - restore_cache:
          keys:
            - v<< pipeline.parameters.cache-generation >>-nuget-python-<< parameters.python-version >>-{{ .Environment.CIRCLE_JOB }}

      - run:
          name: Install python and create virtualenv
          command: |
            nuget install python -Version << parameters.python-version >>
            python.<< parameters.python-version >>\tools\python -m venv env

      - save_cache:
          key: v<< pipeline.parameters.cache-generation >>-nuget-python-<< parameters.python-version >>-{{ .Environment.CIRCLE_JOB }}
          paths:
            - python.<< parameters.python-version >>

      - run:
          name: Install requirements
          command: |
            env\Scripts\activate.ps1
            pip install -U pip
            pip install -r requirements.txt -r tests\requirements.txt

      - run:
          name: Install package
          command: |
            env\Scripts\activate.ps1
            pip install .

      - run:
          name: Run tests
          command: |
            env\Scripts\activate.ps1
            python -m unittest discover

  pypi-deploy:
    docker:
      - image: cimg/python:3.9

    steps:
      - checkout

      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run: *install-requirements

      - save_cache: *save-cache-env

      - run: *build-package

      - store_artifacts:
          path: ./dist

      - run:
          name: Upload package to PyPI
          command: env/bin/twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" --skip-existing ./dist/*


workflows:
  test:
    jobs:
      - test-linux:
          name: test-linux-<< matrix.python-version >> | << matrix.pip-constraints >>
          matrix:
            parameters:
              python-version: &python-versions ["3.7.9", "3.8.6", "3.9.0", "3.10.0", "3.11.0"]
              pip-constraints:
                - "scikit-learn==1.0.2"  # lowest supported by package
                # - "scikit-learn~=1.0.0"  # 1.0.2 is the highest in ~=1.0.0
                - "scikit-learn~=1.1.0"
                - "scikit-learn~=1.2.0"  # latest in current minor as of March 2023
                - "scikit-learn~=1.0"  # latest in current major
            exclude:
              # sklearn < 1.1.3 does not support Python 3.11
              - python-version: "3.11.0"
                pip-constraints: "scikit-learn==1.0.2"
              # sklearn > 1.0.2 does not support Python 3.7
              - python-version: "3.7.9"
                pip-constraints: "scikit-learn~=1.1.0"
              - python-version: "3.7.9"
                pip-constraints: "scikit-learn~=1.2.0"

      - test-macos:
          matrix:
            parameters:
              python-version: *python-versions

      - test-windows:
          matrix:
            parameters:
              python-version: *python-versions

  deploy:
    jobs:
      - pypi-deploy:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
